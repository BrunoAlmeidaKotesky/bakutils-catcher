function w(n){return n&&n instanceof Promise}function s(n){return typeof n=="function"||n instanceof Function}const f=n=>typeof n=="function"?n():n;function O(n,t){return(e,i,r)=>{const{value:a}=r;return r.value=function(...l){try{const u=a.apply(this,l);return w(u)?u.catch(h=>{if(s(t)&&(n===void 0||h instanceof n))return t.call(null,h,this,...l);throw h}):u}catch(u){if(s(t)&&(n===void 0||u instanceof n))return t.call(null,u,this,...l);throw u}},r}}function m(n,t,e){return function(...i){try{const r=n(...i);return w(r)?r.catch(a=>{if(s(e)&&(t===void 0||a instanceof t))return e.call(null,a,this,...i);throw a}):r}catch(r){if(s(e)&&(t===void 0||r instanceof t))return e.call(null,r,this,...i);throw r}}}function k(n,t){return m(n,Error,t)}function N(n,t){return O(n,t)}function A(n){return O(Error,n)}function y(n){return{type:"ok",value:n,unwrap:()=>n,unwrapOr:()=>n,unwrapOrElse:()=>n,isErr:()=>!1,isOk:()=>!0,toOption:()=>p(n),flatMap:t=>t(n),match:t=>t.Ok(n),map:t=>{try{return y(t(n))}catch(e){return c(e)}},flatMapAsync:async t=>t(n)}}function c(n){return{type:"error",error:n,unwrap:()=>{throw n},unwrapOr:t=>t,unwrapOrElse:t=>t(n),isErr:()=>!0,isOk:()=>!1,toOption:()=>o,toJSON:()=>{throw n},flatMap:()=>c(n),match:t=>t.Err(n),map:t=>this,flatMapAsync:async()=>c(n)}}function M(n){return n&&(n.type==="ok"&&"value"in n||n.type==="error"&&"error"in n)}function d(n){return n==null?!1:typeof n=="object"&&!!n&&"type"in n&&n.type==="some"||n.type==="none"}function S(n){if(n==null)throw new Error("Some() cannot be called with null or undefined");return{type:"some",value:n,unwrap:()=>n,unwrapOrU:()=>n,unwrapOr:()=>n,isSome:()=>!0,isNone:()=>!1,map(t){return p(()=>t(n))},flatMap:t=>t(n),flatMapAsync:async t=>t(n),okOr:t=>y(n),mapOr:(t,e)=>{const i=p(t(n));return i.isNone()?p(f(e)):i},flatten:()=>{if(d(n)&&n.isSome())return n;throw new Error("Cannot flatten a non-option value")},match:t=>t.Some(n),toJSON:()=>n,clone:()=>structuredClone(this),toString:()=>n.toString?n.toString():`Some(${n})`}}const o={type:"none",unwrap:()=>{throw new Error("Cannot unwrap None")},unwrapOr:n=>f(n),unwrapOrU:()=>{},isSome:()=>!1,isNone:()=>!0,map:()=>o,flatMap:n=>o,flatMapAsync:async n=>o,okOr:n=>c(f(n)),mapOr:(n,t)=>p(f(t)),toJSON:()=>null,flatten:()=>o,match:n=>n.None(),clone:()=>o,toString:()=>"none"};Object.freeze(o);function p(n){try{const t=f(n);return t==null?o:S(t)}catch(t){return console.error(t),o}}class b{constructor(t,e){Object.defineProperty(this,"type",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"value",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.type=t,this.value=e}match(t){return t[this.type](this.value)}is(t){return this.type===t}}function E(n,t){return new b(n,t)}async function _(n,t,e){try{const i=n(...t??[]);if(i instanceof Promise){const r=await i;return y(r)}return y(i)}catch(i){if(typeof e=="function"){const r=e(i,...t??[]);return c(r)}return c(e||i)}}export{f as BAKUtilsGetFnValue,s as BAKUtilsIsFunction,w as BAKUtilsIsPromise,N as Catcher,A as DefaultCatcher,c as Err,o as None,y as Ok,b as OneOfVariant,p as Option,_ as ResultTry,S as Some,m as catcher,E as createOneOf,k as defaultCatcher,d as isOption,M as isResult};
